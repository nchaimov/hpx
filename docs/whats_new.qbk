[/==============================================================================
    Copyright (C) 2007-2016 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section:whats_new What's New]

[section:hpx_0_9_12 __hpx__ V0.9.12]

[heading General Changes]

* We are moving into the direction of unifying managed and simple components. As
  such, the classes [classref hpx::components::component] and
  [classref hpx::components::component_base] have been added which currently just
  forward to the currently existing simple component facilities. The examples
  have been converted to only use those two classes.
* Added integration with the [@https://circleci.com/gh/STEllAR-GROUP/hpx CircleCI]
  hosted continuous integration service. This gives us constant and immediate
  feedback on the health of our master branch.
* The compiler configuration subsystem in the build system has been reimplemented.
  Instead of using Boost.Config we now use our own lightweight set of cmake
  scripts to determine the available language and library features supported by
  the used compiler.
* The API for creating instances of components has been consolidated. All
  component instances should be created using the [funcref hpx::new_ `hpx::new_<>()`]
  only. It allows to instantiate both, single component instances and multiple
  component instances. The placement of the created components can be controlled
  by special distribution policies. Please see the corresponding documentation
  outlining the use of [funcref hpx::new_ `hpx::new_<>()`].
* Introduced four new distribution policies which can be used with many API
  functions which traditionally expected to be used with a locality id. The
  new distribution policies are:
  * [classref hpx::components::default_distribution_policy `hpx::default_distribution_policy`]
    which tries to place multiple component instances as evenly as possible.
  * [classref hpx::components::colocating_distribution_policy `hpx::colocating_distribution_policy`]
    which will refer to the locality where a given component instance is
    currently placed.
  * [classref hpx::components::binpacking_distribution_policy `hpx::binpacking_distribution_policy`]
    which will place multiple component instances as evenly as possible based
    on any performance counter.
  * [classref hpx::components::target_distribution_policy `hpx::target_distribution_policy`]
    which allows to represent a given locality in the context of a distrwibution
    policy.
* The new distribution policies can now be also used with `hpx::async`. This
  change also deprecates `hpx::async_colocated(id, ...)` which now is replaced
  by a distribution policy: `hpx::async(hpx::colocated(id), ...)`.
* The `hpx::vector` and `hpx::unordered_map` data structures can now be used
  with the new distribution policies as well.
* The parallel facility `hpx::parallel::task_region` has been renamed to
  [classref hpx::parallel::v2::task_block `hpx::parallel::task_block`] based on
  the changes in the corresponding standardization proposal __cpp11_n4088__.
* Added extensions to the parallel facility
  [classref hpx::parallel::v2::task_block `hpx::parallel::task_block`] allowing
  to combine a task_block with an execution policy. This implies a minor
  breaking change as the `hpx::parallel::task_block` is now a template.
* Added new LCOs: `hpx::lcos::latch` and `hpx::lcos::local::latch` which
  semantically conform to the proposed `std::latch` (see __cpp17_n4399__).
* Added performance counters exposing data related to data transferred by
  input/output (filesystem) operations (thanks to Maciej Brodowicz).
* Added performance counters allowing to track the number of action invocations
  (local and remote invocations).
* Added new command line options [hpx_cmdline `--hpx:print-counter-at`] and
  [hpx_cmdline `--hpx:reset-counters`].
* The `hpx::vector` component has been renamed to `hpx::partitioned_vector` to
  make it explicit that the underlying memory is not contiguous.
* Introduced a completely new and uniform higher-level parallelism API which is
  based on executors. All existing parallelism APIs have been adapted to this.
  We have added a large number of different executor types, such as a
  numa-aware executor, a this-thread executor, etc.
* Added support for the MingW toolchain on Windows (thanks to Eric Lemanissier).
* HPX now includes support for APEX, (Autonomic Performance Environment for
  eXascale). APEX is an instrumentation and software adaptation library that
  provides an interface to TAU profiling / tracing as well as runtime adaptation
  of HPX applications through policy definitions. For more information and
  documentation, please see https://github.com/khuck/xpress-apex. To enable
  APEX at configuration time, specify `-DHPX_WITH_APEX=On`. To also include
  support for TAU profiling, specify `-DHPX_WITH_TAU=On` and specify the
  `-DTAU_ROOT`, `-DTAU_ARCH` and `-DTAU_OPTIONS` cmake parameters.
* We have implemented many more of the
  [link hpx.manual.parallel.parallel_algorithms.parallel_algorithms parallel algorithms].
  Please see [issue 1141] for the list of all available parallel algorithms
  (thanks to Daniel Bourgeois and John Biddiscombe for contributing their work).
* We have added a tool to HPX which is used to verify committed code is
  conforming to a list of fundamental coding guidelines. This tool (called
  `inspect`) is derived from a similar tool from Boost. We have modified and
  augmented the tool for our purposes (thanks to Brandon Corde for contributing
  additional guideline checkers). The `inspect` tool is run as part of the
  CircleCI integration tests.

[heading Breaking Changes]

* In order to move the dataflow facility to `namespace hpx` we added a
  definition of `hpx::dataflow` which might create ambiguities in existing
  codes. The previous definition of this facility (`hpx::lcos::local::dataflow`)
  has been deprecated and is available only if the constant
  `HPX_WITH_LOCAL_DATAFLOW_COMPATIBILITY` is defined at configuration time.
  Please explicitly qualify all uses of the dataflow facility if you enable
  this compatibility setting and encounter ambiguities.
* The adaptation of the C++ Extensions for Ranges (__cpp17_n4560__) proposal
  imposes some breaking changes related to the return types of some of the
  parallel algorithms. Please see [issue 1668] for a list of algorithms which
  have already been adapted.
* The facility `hpx::lcos::make_future_void()` has been replaced by
  `hpx::make_future<void>()`.

[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release.

* [pr    1862] - Minor cleanups
* [pr    1855] - Completely removing external/endian
* [pr    1854] - Don't pollute CMAKE_CXX_FLAGS through find_package()
* [pr    1853] - Updating CMake configuration to get correct version of TAU
                 library
* [pr    1852] - Fixing Performance Problems with MPI Parcelport
* [pr    1851] - Fixing hpx_add_link_flag() and hpx_remove_link_flag()
* [pr    1850] - Fixing 1836, adding parallel::sort
* [pr    1849] - Fixing configuration for use of more than 64 cores
* [pr    1848] - Change default APEX version for release
* [pr    1847] - Fix client_base::then on release
* [pr    1846] - Removing broken lcos::local::channel from release
* [pr    1845] - Adding example demonstrating a possible safe-object
                 implementation to release
* [pr    1844] - Removing stubs from accumulator examples
* [pr    1843] - Don't pollute CMAKE_CXX_FLAGS through find_package()
* [pr    1841] - Fixing client_base<>::then
* [pr    1840] - Adding example demonstrating a possible safe-object
                 implementation
* [pr    1838] - Update version rc1
* [pr    1837] - Removing broken lcos::local::channel
* [pr    1835] - Adding exlicit move constructor and assignment operator to
                 hpx::lcos::promise
* [pr    1834] - Making hpx::lcos::promise move-only
* [pr    1833] - Adding fedora docs
* [issue 1832] - hpx::lcos::promise<> must be move-only
* [pr    1831] - Fixing resource manager gcc5.2
* [pr    1830] - Fix intel13
* [pr    1829] - Unbreaking thread test
* [pr    1828] - Fixing #1620
* [pr    1827] - Fixing a memory management issue for the Parquet application
* [issue 1826] - Memory management issue in hpx::lcos::promise
* [pr    1825] - Adding hpx::components::component and
                 hpx::components::component_base
* [pr    1823] - Adding git commit id to circleci build
* [pr    1822] - applying fixes suggested by clang 3.7
* [pr    1821] - Hyperlink fixes
* [pr    1820] - added parallel multi-locality sanity test
* [pr    1819] - Fixing #1667
* [issue 1817] - Hyperlinks generated by inspect tool are wrong
* [pr    1816] - Support hpxrx
* [pr    1814] - Fix async to dispatch to the correct locality in all cases
* [issue 1813] - async(launch::..., action(), ...) always invokes locally
* [pr    1812] - fixed syntax error in CMakeLists.txt
* [pr    1811] - Agas optimizations
* [pr    1810] - drop superfluous typedefs
* [pr    1809] - Allow HPX to be used as an optional package in 3rd party code
* [pr    1808] - Fixing #1723
* [pr    1807] - Making sure resolve_localities does not hang during normal
                 operation
* [issue 1806] - Spinlock no longer movable and deletes operator '=', breaks
                 MiniGhost
* [issue 1804] - register_with_basename causes hangs
* [pr    1801] - Enhanced the inspect tool to take user directly to the problem
                 with hyperlinks
* [issue 1800] - Problems compiling application on smic
* [pr    1799] - Fixing cv exceptions
* [pr    1798] - Documentation refactoring & updating
* [pr    1797] - Updating the activeharmony CMake module
* [pr    1795] - Fixing cv
* [pr    1794] - Fix connect with hpx::runtime_mode_connect
* [pr    1793] - fix a wrong use of HPX_MAX_CPU_COUNT instead of
                 HPX_HAVE_MAX_CPU_COUNT
* [pr    1792] - Allow for default constructed parcel instances to be moved
* [pr    1791] - Fix connect with hpx::runtime_mode_connect
* [issue 1790] - assertion 'action_.get()' failed: HPX(assertion_failure) when
                 running Octotiger with pull request 1786
* [pr    1789] - Fixing discover_counter_types API function
* [issue 1788] - connect with hpx::runtime_mode_connect
* [issue 1787] - discover_counter_types not working
* [pr    1786] - Changing addressing_service to use std::unordered_map instead
                 of std::map
* [pr    1785] - Fix is_iterator for container algorithms
* [pr    1784] - Adding new command line options:
* [pr    1783] - Minor changes for APEX support
* [pr    1782] - Drop legacy forwarding action traits
* [pr    1781] - Attempt to resolve the race between cv::wait_xxx and
                 cv::notify_all
* [pr    1780] - Removing serialize_sequence
* [pr    1779] - Fixed #1501: hwloc configuration options are wrong for MIC
* [pr    1778] - Removing ability to enable/disable parcel handling
* [pr    1777] - Completely removing stackless threads
* [pr    1776] - Cleaning up util/plugin
* [pr    1775] - Agas fixes
* [pr    1774] - Action invocation count
* [pr    1773] - replaced MSVC variable with WIN32
* [pr    1772] - Fixing Problems in MPI parcelport and future serialization.
* [pr    1771] - Fixing intel 13 compiler errors related to variadic template
                 template parameters for lcos::when_ tests
* [pr    1770] - Forwarding decay to std::
* [pr    1769] - Add more characters with special regex meaning to the existing
                 patch
* [pr    1768] - Adding test for receive_buffer
* [pr    1767] - Making sure that uptime counter throws exception on any attempt
                 to be reset
* [pr    1766] - Cleaning up code related to throttling scheduler
* [pr    1765] - Restricting thread_data to creating only with intrusive_pointers
* [pr    1764] - Fixing 1763
* [issue 1763] - UB in thread_data::operator delete
* [pr    1762] - Making sure all serialization registries/factories are unique
* [pr    1761] - Fixed #1751: hpx::future::wait_for fails a simple test
* [pr    1758] - Fixing #1757
* [issue 1757] - pinning not correct using --hpx:bind
* [issue 1756] - compilation error with MinGW
* [pr    1755] - Making output serialization const-correct
* [issue 1753] - HPX performance degrades with time since execution begins
* [issue 1748] - All public HPX headers need to be self contained
* [issue 1523] - Remote async with deferred launch policy never executes
* [issue 1472] - Serialization issues
* [issue 1457] - Implement N4392: C++ Latches and Barriers
* [issue 1265] - Enable dataflow() to be usable with actions
* [issue 1236] - NUMA aware allocators
* [issue  559] - Add hpx::migrate facility
* [issue  279] - Refactor addressing_service into a base class and two derived
                 classes

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[include whats_new_previous.qbk]

[endsect] [/ What's New]

[/Proofread by:]
[/Adrian Serio 3-13-15]
[/Patricia Grubel 3-20-15]
